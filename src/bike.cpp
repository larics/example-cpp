/* Car class implementation.
   Developer documentation is generated from header-files only.
   No docs will be autogenerated from this file.
 */

#include "bike.h"

namespace vehicles
{
    
Bike::Bike(std::string model, double max_speed)
    : model_(model),
      max_speed_(max_speed),
      current_speed_(0.0),
      total_distance_(0.0)
{

}

Bike::~Bike()
{
    // Stop the bike
    current_speed_ = 0.0;
    
    // Release all resources
}
    
/* virtual */
double Bike::accelerate(double speed)
{
    // Limit the speed to max_speed
    if (speed > max_speed_)
    {
        speed = max_speed_;
    }

    if (speed > current_speed_)
    {
        // To accelerate, the desired speed must exceed the current speed
        current_speed_ = speed;
    }
    
    return current_speed_;
}

/* virtual */
double Bike::decelerate(double speed)
{
    // Limit the speed to 0
    if (speed < 0.0)
    {
        speed = 0.0;
    }

    if (speed < current_speed_)
    {
        // To decelerate, the desired speed must be lower than the current sped
        current_speed_ = speed;
    }

    return current_speed_;
}

/* virtual */
double Bike::updateDistance(double td)
{
    // Speed is in km/h, td is in seconds!
    total_distance_ += current_speed_ * td / 3600.0;

    return total_distance_;
}

} // namespace vehicles
